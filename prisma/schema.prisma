generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String     @id
  nickname    String     @unique
  firstname   String
  lastname    String
  avatar      String?
  profileBg   String?
  description String?
  city        String?
  school      String?
  work        String?
  website     String?
  birthday    DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  blocked     Block[]    @relation("blocked")
  blocker     Block[]    @relation("blcoker")
  comments    Comment[]
  followers   Follower[] @relation("Follower")
  following   Follower[] @relation("Following")
  likes       Like[]
  posts       Post[]
  stories     Story[]

  userChats UserChats[]
}

model Post {
  id        Int       @id @default(autoincrement())
  desc      String
  img       String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  postId    Int?
  userId    String
  commentId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    String
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
}

model Follower {
  id          Int      @id @default(autoincrement())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
}

model Block {
  id        Int    @id @default(autoincrement())
  blockerId String
  blockedId String
  blocked   User   @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User   @relation("blcoker", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
}

model Story {
  id        Int      @id @default(autoincrement())
  img       String
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  lastMessage String @default("")
  isSeen      Boolean @default(false)

  userChats UserChats[]
  messages  Message[]
}

model UserChats {
  id        Int      @id @default(autoincrement())
  userId    String
  chatId    Int
  createdAt DateTime @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat? @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  chatId    Int
  senderId  String

  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
