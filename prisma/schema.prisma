generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String  @id
  nickname    String  @unique
  firstname   String
  lastname    String
  avatar      String?
  profileBg   String?
  description String?

  city    String?
  school  String?
  work    String?
  website String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // realtions

  posts     Post[]
  likes     Like[]
  comments  Comment[]
  followers Follower[] @relation("Follower")
  following Follower[] @relation("Following")

  blocked Block[] @relation("blocked")

  blocker Block[] @relation("blcoker")

  stories Story[]
}

model Post {
  id     Int    @id @default(autoincrement())
  desc   String
  img    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // realtions

  likes    Like[]
  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  likes   Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follower {
  id Int @id @default(autoincrement())

  follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  createdAt DateTime @default(now())
}

model Block {
  id Int @id @default(autoincrement())

  blocker   User   @relation("blcoker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String

  blocked   User   @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id     Int    @id @default(autoincrement())
  img    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
